apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'checkstyle'
apply plugin: 'idea'

buildscript {
    ext.kotlin_version = '1.0.0-beta-4589'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.google.guava:guava:14.0.1'
    compile 'org.xhtmlrenderer:flying-saucer-core:9.0.8'
    compile 'nu.validator.htmlparser:htmlparser:1.4'
    compile 'org.reflections:reflections:0.9.10'
    compile 'org.javassist:javassist:3.20.0-GA'

    testCompile 'junit:junit:4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    compile files(
        'lib/Batik/batik-1.7.jar',
    )
}

/*
 * It's convenient when working in Eclipse to have a test suite containing
 * all available tests. However, Gradle normally runs every test it can find
 * automatically, which would cause all tests to be run twice. This bit of
 * configuration prevents that from happening; Gradle just runs the test suite
 * instead.
 */
test {
    include 'org/ggp/base/test/AllTests.class'
}

//You can tweak these JVM arguments for players run through Gradle.
def playerJvmArgs = [
        '-Xmx1500m', //Gives players a max heap size of 1500 MB
        '-server',
        '-XX:-DontCompileHugeMethods',
        '-XX:MinHeapFreeRatio=10',
        '-XX:MaxHeapFreeRatio=10']

//See playerRunner.sh
task playerRunner(type: JavaExec) {
    main = 'org.ggp.base.apps.player.PlayerRunner'
    classpath = sourceSets.main.runtimeClasspath
    //These can be set on the command line with
    //-Pport=9147 and -Pgamer=RandomGamer as arguments.
    doFirst {
        args = [port, gamer]
    }
    jvmArgs = playerJvmArgs
}

task kiosk(type: JavaExec) {
    main = 'org.ggp.base.apps.kiosk.Kiosk'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = playerJvmArgs
}

task server(type: JavaExec) {
    main = 'org.ggp.base.apps.server.Server'
    classpath = sourceSets.main.runtimeClasspath
}

task simpleGameSim(type: JavaExec) {
    main = 'org.ggp.base.apps.utilities.SimpleGameSim'
    classpath = sourceSets.main.runtimeClasspath
}

task tiltyardRequestFarm(type: JavaExec) {
    main = 'org.ggp.base.apps.tiltyard.TiltyardRequestFarm'
    classpath = sourceSets.main.runtimeClasspath
}

task player(type: JavaExec) {
    main = 'org.ggp.base.apps.player.Player'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = playerJvmArgs
}

task propNetAnnotater(type: JavaExec) {
    main = 'org.ggp.base.util.propnet.factory.annotater.PropNetAnnotater'
    classpath = sourceSets.main.runtimeClasspath
}

//See gameServerRunner.sh
task gameServerRunner(type: JavaExec) {
    main = 'org.ggp.base.apps.utilities.GameServerRunner'
    classpath = sourceSets.main.runtimeClasspath
    doFirst {
         args = myargs.split().toList()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}
